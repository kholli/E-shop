%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 11.2.1 (Build 20D74) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 262 140
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 262 140
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: ODJTCJ+Aldrich-Regular
%!FontType1-1.0: ODJTCJ+Aldrich-Regular 1.0000.1.0020
14 dict begin
/FontName /ODJTCJ+Aldrich-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /S put
dup 34 /e put
dup 35 /k put
dup 36 /o put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -119 1 index div -809 2 index div 2232 3 index div 2120 5 -1 roll div]cvx def
/sfnts [<

FE04C4C401D30115FDC4026501C7FE3905C3FCC201A4FDFEFDD90000000200A40000043D04290017001B004BB8001C2FB8001D2FB80000DCB8001ADCB80005D0B8001C10B8000BD0B8000B2FB80019DCB80006D0B8001910B80011D0B8001A10B80012D000BA001A000500032BBA0011001800032B303125140E022321222E023511343E023321321E021521112111043D1F354729FDEF2848351F1F35482802112947351FFD2B0211C52948351F1F354829029F2948351F1F354829FD61029F0001000000010083D12A0A6D5F0F3CF50019080000000000CA670A7800000000D52BCCC3FF89FCD708B808480000000900020000000000000001000005C3FE5200620933FF89FF8908B80001000000000000000000000000000000050400000005C300A404CD00A4046400A404E100A400000000007400D2010C015E0001000000050087000500000000000100000000000A00000200016200000000B800002B
00>] def
/CharStrings 5 dict dup begin
/.notdef 0 def
/S 1 def
/e 2 def
/k 3 def
/o 4 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-119 -809 2232 2120} readonly def
/UniqueID 4133741 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB286FAF7263B5B68DE54D4A7E5E5AE8FB225BCAC76913AC93E959980A55C5DD4CD381439657B7FF2E9DF95C3D15F2AAD2A527E293EF846830B9A14C7B5F724F761405341BD903CC1A087B36C7AB2DBB9C117ED55958C7022CBF2516035BA10E56F77702F68AE9C1B624AD5715C7B058CA375483222020A9712CC064B12E4D6A2C6C811AE9B5E55FF886F70DE3C083D8457E71590D91A373FBB7FD3741D34C5F7EC9991DCB8772E1E44A49188A8F89483B3C93C2A6A4A5AC3A58CA47BAF0CE26E7859CD2825884DEA2A8337AA43DF2E12D0FEF6DEF4C6FE79DFA642D5CA59C928918C3A66BC819495FCFC40B9BE9D88B47C3484449FCA716257BF0A709BBECE10009A9D51A5E8937CFAE265F17819171D4CB93E20E7C481E844CD22F3F381B6B1DDB6CDE7CF06B18AEE418FFF1B2CD2D58BFC6FE12A1C438D68B9324A17B6E65ECB775D1738651B85B65E81120A4789E5A2177BC485348D2DBD4FB262C680C3A1E4385F82CB8D0E0C569818ECB0FA275ADE5FF0A12A5A8B6FA7C0EC0C085C94E8D5635B901F68EF5CF238DA4ADF3CE7AAE85CED9023224EC9E193A679A8D26CB23C1055C06251BEAC498135025FCF7797D4DEAE27FE8F14FD146E8219B4674719B1CADA541EC12B349555074DBDE9E21C93041D27A5BA2E327A701393672D5F2170D7E66B10D97BB8A2E6DCB64559978CF0B6E6EF234D52368B028F2536751D4AC8F668B9D0B966F5FA87FC63AD8F9E272BD6E7FD0A6E5000B138C1F7CAF1B2A03F3C9881B7
57D0AC634B4DF3D00B94A64A003465FCC495C6ECFC4DE3D739DB703B1E04A2F7283D8B8CF49CEB4AA8E467C84400934108C8600D1C5B246121018AF01C8A18579382F0B1EAA49C77091A497C80585910CB12CBF48DBC6E4638EE37A0888CAD6CFA635B7523F1AA0D26A9290763E886A0CCCA1F8AABCCF53AC024C0B1871F09C40C107C3BCEAD74E99EA5D2E948C9D4057BA1D51E2903AA005449D315FADA0485C5DDA97A28F85B08E39263538BA5867E296AB24712F7078FFBBE608C1134E074401D6DE5E574215A5B74042660B099E47D0DBBC6B56D8F17D21D40CCF810B10A5BDF9F4F96C3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/ODJTCJ+Aldrich-Regular cguidfix
/F1.1/ODJTCJ+Aldrich-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
q
0 0 262 140 rc
118 0 0 118 60 10 cm
BI
/Width 354
/Height 354
/BitsPerComponent 8
/Decode[
0 1
0 1
0 1
]
/Interpolate true
/DataSource cg_aiproc
ID
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$
JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)
JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$
JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$
JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$
JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$
JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$
g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$
JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$
JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)
JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$
JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$
JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$
JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$
JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$
g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$
JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$
JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)
JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$
JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$
JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$
JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$
JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$
g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$
JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$
JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)
JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$
JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$
JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$
JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$
JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$
g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$
JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$
JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)
JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$
JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$
JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$
JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$
JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$
g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$
JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$
JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)
JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$
JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$
JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$
JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$
JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$
g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$
JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$
JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)
JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$
JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$
JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$
JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$
JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$
g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$
JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$
JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)
JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$
JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$
JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$
JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$
JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$
g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$
JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$
JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)
JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$
JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$
JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$
JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$
JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$
g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$
JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$
JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)
JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$
JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$
JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$
JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$
JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$
g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$
JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$
JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)
JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$
JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$
JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$
JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$
JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$
g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$
JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)
JcC<$JcC<$JcC<$JcC<$g])j)JcC<$JcC<$JcC<$JcFL)J,
~> %APLeod
EI
3 w
1 J
0.60000002 i
1 1 1 sc
2 0 0 -2 118 136 cm
34 34 m
34 15.222319 18.777681 0 0 0 c
S
2 w
2 0 0 -2 50 68 cm
0 0 m
0.33161741 18.54624 16.001652 33.318504 35 32.994778 c
S
Q
0.60000002 i
1 0.98091477 0.98091477 sc
q
109 132 m
110.65685 132 112 133.34314 112 135 c
112 136.65686 110.65685 138 109 138 c
107.34315 138 106 136.65686 106 135 c
106 133.34314 107.34315 132 109 132 c
h
W*
0 0 262 140 rc
96 148 m
122 148 l
122 122 l
96 122 l
h
f
Q
q
184 50 m
185.10457 50 186 50.895432 186 52 c
186 53.104568 185.10457 54 184 54 c
182.89543 54 182 53.104568 182 52 c
182 50.895432 182.89543 50 184 50 c
h
W*
0 0 262 140 rc
172 64 m
196 64 l
196 40 l
172 40 l
h
f
Q
q
102 130 m
103.10457 130 104 130.89543 104 132 c
104 133.10457 103.10457 134 102 134 c
100.89543 134 100 133.10457 100 132 c
100 130.89543 100.89543 130 102 130 c
h
W*
0 0 262 140 rc
90 144 m
114 144 l
114 120 l
90 120 l
h
f
Q
q
133 4 m
133.55229 4 134 4.4477153 134 5 c
134 5.5522847 133.55229 6 133 6 c
132.44771 6 132 5.5522847 132 5 c
132 4.4477153 132.44771 4 133 4 c
h
W*
0 0 262 140 rc
122 16 m
144 16 l
144 -6 l
122 -6 l
h
f
Q
q
50 74 m
51.104568 74 52 74.895432 52 76 c
52 77.104568 51.104568 78 50 78 c
48.895432 78 48 77.104568 48 76 c
48 74.895432 48.895432 74 50 74 c
h
W*
0 0 262 140 rc
38 88 m
62 88 l
62 64 l
38 64 l
h
f
Q
q
185 56 m
186.65686 56 188 57.343147 188 59 c
188 60.656853 186.65686 62 185 62 c
183.34314 62 182 60.656853 182 59 c
182 57.343147 183.34314 56 185 56 c
h
W*
0 0 262 140 rc
172 72 m
198 72 l
198 46 l
172 46 l
h
f
Q
q
126 0 m
127.10457 0 128 0.89543051 128 2 c
128 3.1045694 127.10457 4 126 4 c
124.89543 4 124 3.1045694 124 2 c
124 0.89543051 124.89543 0 126 0 c
h
W*
0 0 262 140 rc
114 14 m
138 14 l
138 -10 l
114 -10 l
h
f
Q
q
53 82 m
53.552284 82 54 82.447716 54 83 c
54 83.552284 53.552284 84 53 84 c
52.447716 84 52 83.552284 52 83 c
52 82.447716 52.447716 82 53 82 c
h
W*
0 0 262 140 rc
42 94 m
64 94 l
64 72 l
42 72 l
h
f
Q
0.98511273 0.96334416 0.96334416 sc
q
100 22 50 66 rc
2 0 0 -2 100 88 cm
/F1.1[ 25 0 0 -25 0 0]sf
0 18 m
(!)s
Q
q
0 38 28 48 rc
2 0 0 -2 -2 86 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 17 m
(")s
Q
q
210 42 52 46 rc
2 0 0 -2 210 86 cm
/F1.1[ 24 0 0 -24 0 0]sf
0 17 m
(#$)[ 13.171875 0.000000 ] xS
ep
end
